########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.0.1 (12/1/2021)                                             ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    main.py
    extract_member_forces.py
    generate_mem_array_info.py

Description:
    Initial commit of working prototype for extracting member forces. Program can parse .gto file and search for
    instances of 'LIST FOR' and return a csv file of results based on inputs from the user. This includes, specific
    beams, loads, and joints as well as which instance of 'LIST FOR' is requested.
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.0.2  (1/2/2022)                                             ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    save_output.py (formerly main.py)
    change_log.txt
    generate_mem_array_info.py
    extract_member_forces.py
    main.py

Description:

    Added class structure to all files
    Added 'change_log.txt' to track high level changes between program versions

    Functionality Changes:

        Added ability to select output results from multiple member data sets at the same time
        Added ability to modify or delete parameters from selected data sets
        Added functionality to chose from single .csv file or .xlsx file with each member set as a separate tab

    Interface Changes:

        Added GUI with the following features:

            Select working directory and select output file to parse
            Choose from list of available member force results to create new result set
            Modify, delete, or add new results sets
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.0.3  (1/25/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    save_output.py
    generate_mem_array_info.py
    extract_member_forces.py
    error_handling.py
    main.py
    change_log.txt

Description:

    This version mainly focused on addressing error handling for the GUI and Member Force Extraction portion of the
    program. Functionality was added as described below.

    Functionality Changes:

        Added ability to store generated result sets in a 'properties' file and added the ability to read from the file
        and restore generated results.
        Added ability to delete multiple selected member results sets at once
        Added checks to insure a directory and file are selected
        Added 'safety' by changing which buttons are enabled or disabled at a given time, preventing unexpected user
        inputs.
        Changed from manipulating array with numpy concatenate to using lists and list comprehension. Run time is now
        an O(n) operation instead of O(n^2). Yay!
        Added error window and warning popups for invalid inputs into the 'store member forces' window
        Changed save to excel option to write contents to rows and columns rather than just rows. This results in each
        piece of data going into its own cell - results in not having to do text to columns manually.
        When result is modified, the previous results are repopulated in the 'new member results' window


    Interface Changes:

        Added button to store created results sets
        modified button size on member force extraction page to be consistent
        Added error popups for several error types
        Removed output format frame and radio buttons. User is now allowed to save file using Windows file dialog
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.1.0  (1/29/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    joint_reactions_GUI
    member_force_GUI
    error_handling.py
    main.py
    change_log.txt
    utilities_GUI.py

Description:

    Mostly bug fixes and small GUI cleanup. Split GUI into different scripts for ease of tracking. Updated version to
    0.1.0 - Member force extraction module is functionally and graphically complete. Program runs as intended with full
    initial functionality for that module. Added utilities_GUI.py to capture all commonly used GUI functions.

    Functionality Changes:

        Fixed bug where deleting a member force result set and then storing a properties file would assign the first
        dictionary entry "2" instead of starting at "1"
        Fixed bug where clicking on "modify Result" would paste "ALL" in the beam and load text input sometimes
        resulting in "ALLALL" being displayed.


    Interface Changes:

        Moved second main window to tabs with each tab representing a different functionality of the program (i.e.
        member forces, joint reactions, code check, etc.)
        Added exit button to second main window.
        Cleaned up error popup window to be consistent size for all errors, only changing the text which is displayed.
        When error popup occurs all other windows are frozen (cannot be interacted with) until the error window is
        closed.
        Fixed spelling mistakes in error popups and program description.
        Added tooltips to the member force selection load_text and beam_text box to explain acceptable inputs
        Centered windows on screen where it made sense.
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.1.1  (2/26/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    extract_member_forces.py
    generate_mem_array_info.py
    save_output.py
    error_handling.py


Description:

    Bug fixes related to member force extraction discovered while developing joint reaction extraction. Member
    extraction is now based on a fixed column widths for FX, FY, FZ, MX, MY, MZ.

    Functionality Changes:

        Revised parsing of member forces based on fixed column width depending on the number of headers
        Major revision to how the member force dats sets are parsed. The data is now subdivided into "blocks" which
        are the size of the individual member. Each block is searched for number of load cases and joints and checked
        for any GTSTRUDL warning messages. This change resolves a bug which occurred when there were warning messages
        in the output or if truss members and non truss members were combined in a single output.


    Interface Changes:

        None
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.1.2  (3/04/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    extract_joint_reactions.py
    extract_member_forces.py
    generate_joint_array_info.py
    generate_mem_array_info.py
    joint_reactions_GUI.py
    main.py
    member_forces_GUI
    save_output.py
    error_handling.py


Description:

    Added handling of joint reaction results

    Functionality Changes:

        Added parsing of file to search for joint reactions
        Added ability to generate result sets based on joint reaction input criteria


    Interface Changes:

        Filled out tab for joint reactions
        Removed joint radio buttons in the joint reactions selection window.
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.1.3  (3/05/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    extract_joint_reactions.py
    extract_member_forces.py
    joint_reactions_GUI.py
    member_forces_GUI
    save_output.py
    error_handling.py
    utilities_GUI.py


Description:

    Improvements to GUI as described below. Improvements to error handling.

    Functionality Changes:

        Fixed incorrect naming of .json dictionary in joint reactions. Joint reactions still used the "member results"
        and "beam" keys rather than "joint results" and "joint" keys.
        Fixed bug where if there were no valid beams meeting the criteria input by the user an 'invalid index' error
        would occur when looping through the beam list. This is addressed by checking to make sure there are items
        in the beam or load list and if there are not throwing an exception.
        Fixed incorrect variable names in extract_joint_reactions left over from using similar code
        paired down list of reported errors to unique values rather than reporting the same error multiple times
        Addressed key errors when user tries to import result sets from incompatible file

    Interface Changes:

        Changed available results list box into a treeview to assign a set number to all available results
        Resized error windows to match the length of contents (manually). Shorter errors have smaller error windows
        Added beam/joint, and load spec errors to a tree view for easier error viewing
        Added corresponding input file line number to available results treeview such that the user can easily navigate
        to the specific line in the input file where the command was entered.
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.2.0  (3/14/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    extract_member_forces.py
    save_output.py
    error_handling.py
    utilities_GUI.py
    extract_code_check.py
    generate_code_check_array.py


Description:

    Added new module for handing the code check results.

    Functionality Changes:

        Added modules to parse the code check results searching for 'DESIGN TRACE OUTPUT' and returning the code
        check result sets.
        Added functions for parsing the code check results for user requested beam names, profile names, and IRs falling
        within a certain range. Also added functionality to return only members which failed the code check.
        Added functions for sorting the results based on beam name, profile name, or IR.
        Added ability to save results as .csv or .xlsx for code check results.
        Minor code cleanup on other files

    Interface Changes:

        None
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.2.1  (3/22/2022)                                            ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    error_handling.py
    extract_code_check.py
    save_output.py
    code_check_gui.py
    main.py


Description:

    Added code check results to GUI. Fixed bugs in old code that came up along the way

    Functionality Changes:

        Changed error handling to accept member, joint, or code check results in same function
        Added ability to save code check results to file
        Added ability to store previously generated code check result sets

    Interface Changes:

        Added code check window frame
########################################################################################################################
##                                                                                                                    ##
##                                              Version 0.2.2  (4/8/2022)                                             ##
##                                                                                                                    ##
########################################################################################################################
Documents uploaded to Github:

    change_log.txt
    code_check_GUI.py
    config.py
    data_storage.py
    frame_display_window.py
    generate_joint_array_info.py
    joint_reactions_GUI.py
    main.py
    member_force_GUI.py
    process_data.py
    results_selection_window.py
    utilities_GUI.py

Description:

    ** currently does not generate results but the interface development has been streamlined **


    Functionality Changes:

        Fixed that importing stored code check results would display the incorrect IR range
        Fixed that imported result sets for code check results could not be modified
        Added a results parameters class which contains a dictionary of all selected user results which can then be
        accessed at any time
        Developed a configuration file to store internal data which is used multiple times such as headings and file
        types such that any updates can occur in a single location and will propagate throughout the files.


    Interface Changes:

        Changed button frame on main tab to label frame
        Unified the generation of the widgets on the tabs - consolidated to single file instead of copied 3 times. Now
        all tabs look the same with only small differences unique to the specific tab requirements